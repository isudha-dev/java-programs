package subarray;

public class SubarraySumLessThan {

    // https://www.scaler.com/academy/mentee-dashboard/class/25551/homework/problems/16089?navref=cl_tt_lst_nm

    public static void main(String[] args) {
        System.out.println(solve(new int[] { 293, 828, 748, 815, 783, 283, 993, 493, 144, 688, 961, 669, 52, 814, 158,
                705, 801, 801, 268, 740, 668, 619, 156, 495, 138, 425, 802, 500, 969, 120, 452, 944, 715, 882, 427, 757,
                754, 597, 364, 132, 184, 421, 591, 472, 303, 901, 715, 368, 244, 91, 949, 938, 488, 358, 443, 155, 416,
                425, 173, 220, 918, 162, 993, 82, 210, 100, 58, 605, 666, 414, 210, 622, 423, 283, 510, 689, 226, 774,
                498, 857, 246, 980, 8, 76, 69, 479, 29, 158, 299, 429, 44, 692, 233, 638, 735, 795, 49, 930, 986, 952,
                321, 994, 148, 428, 243, 855, 103, 133, 87, 200, 811, 904, 711, 325, 967, 418, 806, 214, 791, 721, 408,
                490, 670, 23, 453, 812, 869, 283, 706, 891, 172, 782, 871, 383, 267, 171, 238, 325, 815, 908, 652, 400,
                412, 786, 877, 609, 291, 614, 818, 466, 460, 126, 174, 134, 924, 914, 604, 168, 854, 284, 623, 358, 553,
                844, 853, 655, 106, 116, 473, 637, 787, 123, 110, 991, 257, 358, 990, 232, 987, 788, 465, 935, 458, 92,
                476, 695, 40, 76, 198, 142, 819, 479, 956, 635, 755, 626, 386, 899, 190, 1000, 427, 132, 508, 572, 448,
                17, 310, 409, 122, 663, 467, 272, 469, 686, 76, 653, 603, 912, 119, 540, 209, 550, 959, 403, 455, 552,
                333, 164, 510, 994, 684, 534, 918, 997, 552, 486, 866, 859, 889, 78, 677, 146, 255, 943, 629, 478, 153,
                788, 105, 16, 154, 339, 552, 734, 76, 14, 400, 751, 136, 986, 617, 564, 349, 580, 538, 682, 979, 813,
                720, 715, 711, 661, 39, 160, 766, 652, 649, 661, 543, 575, 178, 690, 213, 472, 591, 210, 858, 447, 835,
                753, 582, 407, 100, 516, 475, 90, 118, 934, 290, 20, 95, 450, 724, 719, 910, 560, 452, 441, 141, 138,
                635, 513, 608, 911, 51, 647, 55, 908, 481, 295, 397, 182, 9, 134, 998, 673, 651, 812, 79, 959, 471, 354,
                111, 358, 597, 722, 795, 664, 502, 792, 575, 658, 908, 760, 433, 555, 348, 403, 380, 180, 906, 657, 574,
                542, 556, 479, 144, 391, 171, 296, 687, 59, 679, 967, 13, 867, 157, 701, 895, 192, 868, 989, 767, 930,
                589, 222, 430, 311, 302, 103, 398, 723, 890, 442, 769, 271, 902, 603, 986, 581, 894, 641, 195, 999, 316,
                288, 591, 105, 235, 656, 673, 565, 450, 830, 840, 190, 365, 661, 862, 665, 873, 712, 773, 539, 287, 184,
                979, 878, 80, 60, 474, 569, 449, 195, 421, 458, 250, 878, 951, 549, 507, 669, 504, 670, 576, 445, 249,
                144, 377, 740, 326, 798, 657, 638, 640, 663, 809, 790, 472, 553, 706, 33, 211, 966, 933, 890, 268, 254,
                742, 845, 381, 299, 960, 701, 716, 75, 948, 379, 155, 389, 313, 8, 684, 513, 517, 392, 862, 926, 336,
                564, 264, 400, 717, 384, 629, 566, 39, 932, 843, 398, 796, 211, 44, 269, 596, 831, 965, 733, 896, 154,
                917, 549, 779, 523, 51, 662, 99, 620, 928, 580, 698, 71, 980, 336, 881, 888, 985, 878, 738, 330, 706,
                799, 81, 384, 483, 849, 557, 334, 368, 854, 193, 479, 923, 845, 410, 459, 178, 38, 864, 134, 330, 165,
                167, 120, 133, 938, 139, 983, 100, 82, 917, 121, 105, 158, 303, 938, 661, 744, 564, 538, 217, 576, 326,
                941, 22, 328, 19, 408, 601, 682, 213, 892, 220, 21, 435, 314, 39, 522, 597, 151, 590, 299, 813, 465, 33,
                538, 691, 529, 535, 901, 515, 725, 226, 375, 1000, 137, 997, 297, 985, 862, 960, 968, 627, 464, 779,
                181, 780, 712, 846, 785, 574, 256, 24, 656, 905, 460, 281, 979, 184, 318, 965, 101, 801, 7, 262, 892,
                709, 578, 54, 179, 856, 738, 942, 377, 192, 377, 976, 979, 792, 17, 668, 645, 168, 980, 244, 869, 31,
                116, 409, 499, 379, 751, 337, 390, 281, 624, 630, 426, 601, 469, 400, 278, 656, 21, 13, 819, 393, 709,
                139, 664, 876, 150, 534, 862, 252, 90, 347, 55, 354, 71, 142, 910, 137, 440, 240, 561, 740, 567, 700,
                135, 346, 523, 181, 456, 714, 713, 27, 772, 389, 292, 842, 410, 25, 497, 382, 137, 881, 18, 70, 304,
                853, 843, 645, 829, 963, 664, 761, 502, 904, 381, 268, 988, 751, 419, 294, 192, 375, 142, 716, 42, 241,
                566, 926, 392, 93, 87, 389, 576, 871, 43, 539, 9, 742, 141, 904, 298, 795, 634, 254, 321, 744, 404, 967,
                950, 833, 716, 689, 487, 638, 912, 140, 446, 762, 185, 401, 988, 570, 229, 905, 279, 854, 7, 100, 59,
                555, 662, 572, 891, 725, 727, 796, 484, 169, 413, 423, 717, 885, 376, 629, 945, 501, 834, 98, 914, 113,
                689, 639, 719, 868, 965, 243, 518, 169, 15, 925, 745, 445, 804, 193, 783, 611, 210, 410, 792, 538, 500,
                235, 424, 933, 74, 537, 738, 372, 675, 943, 400, 179, 238, 480, 942, 312, 950, 552, 676, 137, 996, 295,
                681, 916, 415, 119, 47, 263, 906, 732, 693, 243, 451, 377, 212, 590, 741, 130, 809, 552, 454, 938, 187,
                440, 483, 424, 697, 996, 378, 789, 434, 44, 64, 754, 235, 410, 560, 561, 294, 923, 565, 819, 33, 396,
                141, 248, 628, 481, 439, 111, 82, 711, 597, 286, 895, 682, 522, 700, 837, 720, 187, 201, 463, 32, 471,
                974, 701, 326, 636, 98, 973, 307, 178, 425, 452, 637, 329, 770, 893, 225, 507, 940, 69, 213, 413, 990,
                447, 625, 224 }, 194588));
    }

    // ex 278081
    // ac 278082

    static int solve(int[] A, int B) {
        int n = A.length;
        int[] ps = new int[n];

        ps[0] = A[0];
        for (int i = 1; i < n; i++) {
            ps[i] = ps[i - 1] + A[i];
        }

        int count = 0;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            if (A[i] >= B) {
                continue;
            }

            for (int j = i; j < n; j++) {
                sum = getPSRangeSum(ps, i, j);
                if (sum >= B) {
                    break;
                } else
                    count++;
            }
        }

        return count;
    }

    static long getPSRangeSum(int[] ps, int s, int e) {

        if (s == 0) {
            return ps[e];
        } else {
            return ps[e] - ps[s - 1];
        }
    }

}
